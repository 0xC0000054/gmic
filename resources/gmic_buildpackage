#!/bin/bash
#
#  File        : gmic_buildpackage
#                ( Bash script )
#
#  Description : Build .tar.gz and .deb package files
#                of G'MIC (GREYC's Magic for Image Computing).
#
#  Usage       : ./gmic_buildpackage [final]
#
#  Copyright   : David Tschumperle
#                ( http://tschumperle.users.greyc.fr/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#

# Handle package building on Windows.
#------------------------------------
if [ "$OSTYPE" == "msys" ]; then

    # Determine 32/64 bits architecture.
    BITS=`g++ -v 2>&1 | grep Target | tail -c+9`
    if [ "$BITS" == "x86_64-w64-mingw32" ]; then BITS=64; else BITS=32; fi
    echo
    echo " - Build G'MIC packages for Windows ($BITS bits)."
    cd $HOME

    # Clean old packages and input sources.
    rm -rf gmic gmic-qt gmic_*${VERSION}${SUFFIX}*_win${BITS}* gmic-*${VERSION}${SUFFIX}*-win${BITS}* *.iss
    mkdir gmic
    cp -rf /e/work/src/gmic-qt $HOME
    cp -rf /e/work/src/gmic/src $HOME/gmic
    cp -rf /e/work/src/gmic-community/libcgmic/*gmic* $HOME/gmic/src
    cp -rf /e/work/src/gmic-community/zart $HOME/gmic/
    cp -rf /e/work/src/gmic/resources/gmic_film_cluts.gmz $HOME/build${BITS}-gimp-gtk
    cp -rf /e/work/src/gmic/resources/gmic_film_cluts.gmz $HOME/build${BITS}-gimp-qt

    # Get version number.
    cd $HOME/gmic/src
    RELEASE0=`grep "#define gmic_version" gmic.h | tail -c5`
    RELEASE1=`echo $RELEASE0 | head -c1`
    RELEASE2=`echo $RELEASE0 | head -c2 | tail -c1`
    RELEASE3=`echo $RELEASE0 | head -c3 | tail -c1`
    VERSION=$RELEASE1.$RELEASE2.$RELEASE3
    SVERSION=$RELEASE1$RELEASE2$RELEASE3
    echo " - Release number : $VERSION$SUFFIX."

    if [ "$1" == "final" ]; then
        SUFFIX="";
        sed "s/PRERELEASE_CFLAGS = /NO_PRERELEASE_CFLAGS = /" Makefile > /tmp/Makefile
        mv /tmp/Makefile Makefile
        sed "s/PRERELEASE = /NO_PRERELEASE = /" Makefile > /tmp/Makefile
        mv /tmp/Makefile Makefile
    else SUFFIX=_pre;
    fi
    sed "s/rm -rf CImg.h gmic_stdlib.h /rm -rf /" Makefile > /tmp/Makefile
    mv /tmp/Makefile Makefile

    cd $HOME
    sed s\/XXX\/${VERSION}${SUFFIX}\/g /e/work/src/gmic/resources/gmic_gimp_gtk${BITS}.iss > tmp.iss &&
        sed s\/YYY\/${RELEASE1}\/g tmp.iss > installer_gtk.iss
    sed s\/XXX\/${VERSION}${SUFFIX}\/g /e/work/src/gmic/resources/gmic_gimp_qt${BITS}.iss > tmp.iss &&
        sed s\/YYY\/${RELEASE1}\/g tmp.iss > installer_qt.iss

    # Define output files (archives/installers).
    OUTDIR_CLI=gmic-cli-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_CLI=gmic_cli_${VERSION}${SUFFIX}_win${BITS}.zip

    OUTDIR_LIB=gmic-lib-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_LIB=gmic_lib_${VERSION}${SUFFIX}_win${BITS}.zip

    OUTDIR_ZART=gmic-zart-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_ZART=gmic_zart_${VERSION}${SUFFIX}_win${BITS}.zip

    OUTDIR_QT=gmic-qt-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_QT=gmic_qt_${VERSION}${SUFFIX}_win${BITS}.zip

    OUTDIR_GIMP_GTK=gmic-gimp-gtk-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_GIMP_GTK=gmic_gimp_gtk_${VERSION}${SUFFIX}_win${BITS}.zip
    OUTINST_GIMP_GTK=gmic_gimp_gtk_${VERSION}${SUFFIX}_win${BITS}.exe

    OUTDIR_GIMP_QT=gmic-gimp-qt-${VERSION}${SUFFIX}-win${BITS}
    OUTZIP_GIMP_QT=gmic_gimp_qt_${VERSION}${SUFFIX}_win${BITS}.zip
    OUTINST_GIMP_QT=gmic_gimp_qt_${VERSION}${SUFFIX}_win${BITS}.exe

    # Compile sources.
    cd $HOME/gmic/src && make clean && rm -f gmic gmic_gimp_gtk *.o
    make OPT_CFLAGS="-O3 -m${BITS} -mtune=generic" cli gimp_gtk libc libcstatic

    cd $HOME/gmic/zart && rm -rf .obj && qmake GMIC_PATH=../src zart.pro && make clean
    make release

    cd $HOME/gmic-qt && rm -rf .obj
    if [ "$1" == "final" ]; then
        qmake PRERELEASE= HOST=none gmic_qt.pro && make clean && make release
        qmake PRERELEASE= HOST=gimp gmic_qt.pro && make release
    else
        qmake PRERELEASE=`date +%y%m%d` HOST=none gmic_qt.pro && make clean && make release
        qmake PRERELEASE=`date +%y%m%d` HOST=gimp gmic_qt.pro && make release
    fi

    # Copy binaries into their respective folders.
    cd $HOME
    cp -f gmic/src/gmic.exe build${BITS}-cli/
    cp -f gmic/src/gmic.h gmic/src/gmic_libc.h gmic/src/use_lib* gmic/src/lib*.d* build${BITS}-lib/
    cp -f gmic/src/gmic_gimp_gtk.exe build${BITS}-gimp-gtk/
    cp -f gmic/zart/release/zart.exe build${BITS}-zart/
    cp -f gmic-qt/release/gmic_qt.exe build${BITS}-qt/
    cp -f gmic-qt/release/gmic_gimp_qt.exe build${BITS}-gimp-qt/

    # Construct G'MIC (CLI) archive.
    cp -rf build${BITS}-cli ${OUTDIR_CLI} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_CLI} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_CLI}/README &&
        zip -r -9 ${OUTZIP_CLI} ${OUTDIR_CLI} &&
        cp -f ${OUTZIP_CLI} /e/work/src/

    # Construct G'MIC (LIB) archive.
    cp -rf build${BITS}-lib ${OUTDIR_LIB} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_LIB} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_LIB}/README &&
        zip -r -9 ${OUTZIP_LIB} ${OUTDIR_LIB} &&
        cp -f ${OUTZIP_LIB} /e/work/src/

    # Construct ZART archive.
    cp -rf build${BITS}-zart ${OUTDIR_ZART} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_ZART} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_ZART}/README &&
        zip -r -9 ${OUTZIP_ZART} ${OUTDIR_ZART} &&
        cp -f ${OUTZIP_ZART} /e/work/src/

    # Construct G'MIC (Qt standalong) archive.
    cp -rf build${BITS}-qt ${OUTDIR_QT} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_QT} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_QT}/README &&
        zip -r -9 ${OUTZIP_QT} ${OUTDIR_QT} &&
        cp -f ${OUTZIP_QT} /e/work/src/

    # Construct G'MIC for GIMP (GTK) archive and installer.
    cp -rf build${BITS}-gimp-gtk ${OUTDIR_GIMP_GTK} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_GIMP_GTK} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_GIMP_GTK}/README &&
        zip -r -9 ${OUTZIP_GIMP_GTK} ${OUTDIR_GIMP_GTK} &&
        cp -f ${OUTZIP_GIMP_GTK} /e/work/src/

    /c/Program\ Files\ \(x86\)/Inno\ Setup\ 5/ISCC.exe installer_gtk.iss
    touch ${OUTINST_GIMP_GTK} &&
        sleep 3 &&
        cp -f ${OUTINST_GIMP_GTK} /e/work/src/ &&

    # Construct G'MIC for GIMP (Qt) archive and installer.
    cp -rf build${BITS}-gimp-qt ${OUTDIR_GIMP_QT} &&
        cp -f /e/work/src/gmic/COPYING ${OUTDIR_GIMP_QT} &&
        sed s\/_gmic_version\/${VERSION}${SUFFIX}\/ /e/work/src/gmic/README > ${OUTDIR_GIMP_QT}/README &&
        zip -r -9 ${OUTZIP_GIMP_QT} ${OUTDIR_GIMP_QT} &&
        cp -f ${OUTZIP_GIMP_QT} /e/work/src/

    /c/Program\ Files\ \(x86\)/Inno\ Setup\ 5/ISCC.exe installer_qt.iss
    touch ${OUTINST_GIMP_QT} &&
        sleep 3 &&
        cp -f ${OUTINST_GIMP_QT} /e/work/src/ &&

    echo " - All done!"
    return;
fi

# Build package from a virtual Debian/Ubuntu machine.
#-----------------------------------------------------
DIST=`lsb_release -d | tail -c+13 | xargs`
BITS=`uname -m`

if [ "$DIST" != "Ubuntu 16.04.2 LTS" ] || [ "$BITS" != "x86_64" ] ; then
    SF_HOME=/media/sf_dtschump/
    cd ${SF_HOME}/work/src
    RELEASE0=`grep "#define gmic_version" gmic/src/gmic.h | tail -c5`
    RELEASE1=`echo $RELEASE0 | head -c1`
    RELEASE2=`echo $RELEASE0 | head -c2 | tail -c1`
    RELEASE3=`echo $RELEASE0 | head -c3 | tail -c1`
    VERSION=$RELEASE1.$RELEASE2.$RELEASE3
    SVERSION=$RELEASE1$RELEASE2$RELEASE3

    CODENAME=`lsb_release -i | xargs | tail -c+16 | xargs`_`lsb_release -c | xargs | tail -c+10 | xargs`
    CODENAME="$(echo $CODENAME | tr '[A-Z]' '[a-z]')"
    BITS=`uname -m`
    if [ "$BITS" == "x86_64" ]; then BITS=64; ARCH=amd64; PARCH=x86_64; else BITS=32; ARCH=i386; PARCH=i386; fi
    if [ "$1" == "final" ]; then SUFFIX=""; else SUFFIX=_pre; fi
    TARFILE=gmic_${VERSION}${SUFFIX}.tar
    PAK=gmic_${VERSION}${SUFFIX}_${CODENAME}_${ARCH}.deb
    PLUGTK=gmic_gimp_gtk_${VERSION}${SUFFIX}_linux${BITS}.zip
    PLUGTK2=gmic_gimp_gtk_${VERSION}${SUFFIX}_yakkety${BITS}.zip
    PLUGQT=gmic_gimp_qt_${VERSION}${SUFFIX}_linux${BITS}.zip
    STA=gmic_static_${VERSION}${SUFFIX}_linux${BITS}.zip
    DIR=gmic-${VERSION}${SUFFIX}
    while [ ! -f deb_${TARFILE}.gz ]; do sleep 10; done
    sleep 10
    cp deb_${TARFILE}.gz /tmp/ &&
        cd /tmp/ &&
        rm -rf $PAK $PLUGTK $DIR &&
        touch deb_${TARFILE}.gz &&
        tar zxvf deb_${TARFILE}.gz &&
        find gmic-${VERSION}${SUFFIX} -exec touch {} ;
    cd $DIR/src
    sed "s/\$(MAKE) cli gimp_gtk lib/\$(MAKE) cli gimp_gtk lib libc zart/g" Makefile > /tmp/Makefile && mv /tmp/Makefile Makefile
    if [ -f $HOME/is_qt5 ]; then
        sed "s/\$(MAKE) cli gimp_gtk lib libc zart/\$(MAKE) cli gimp_gtk lib libc zart gmic_qt gimp_qt/g" Makefile > /tmp/Makefile && mv /tmp/Makefile Makefile
    fi
    cd ../..

    cd $DIR &&
        dpkg-buildpackage -d -j3 -rfakeroot;
    mv ../gmic_${VERSION}_${ARCH}.deb ../$PAK

    if [ "$CODENAME" == "ubuntu_yakkety" ]; then
        zip -j -r -9 ../$PLUGTK2 src/gmic_gimp_gtk README &&
            cd .. &&
            cp -f $PLUGTK2 $PAK $SF_HOME/work/src/
    elif [ "$CODENAME" == "debian_wheezy" ]; then
        zip -j -r -9 ../$PLUGTK src/gmic_gimp_gtk README &&
            cd src && make clean && make GMIC_STATIC_CLI_PATH=/usr/lib/${PARCH}-linux-gnu static && mv gmic ../ &&
            cd .. && rm -rf man src zart debian && cd .. &&
            zip -r -9 $STA $DIR &&
            cp -f $PLUGTK $PAK $STA $SF_HOME/work/src/
    elif [ "$CODENAME" == "debian_jessie" ]; then
        zip -j -r -9 ../$PLUGQT gmic-qt/gmic_gimp_qt README &&
            cd .. &&
            cp -f $PLUGQT $PAK $SF_HOME/work/src/
    else
        cd .. &&
            cp -f $PAK $SF_HOME/work/src/
    fi
    echo VIRTUALBOX_DONE
    return;
fi

# Build package from main machine (ELARA).
#-----------------------------------------
cd ${HOME}/work/src
RELEASE0=`grep "#define gmic_version" gmic/src/gmic.h | tail -c5`
RELEASE1=`echo $RELEASE0 | head -c1`
RELEASE2=`echo $RELEASE0 | head -c2 | tail -c1`
RELEASE3=`echo $RELEASE0 | head -c3 | tail -c1`
VERSION=$RELEASE1.$RELEASE2.$RELEASE3
SVERSION=$RELEASE1$RELEASE2$RELEASE3
if [ "$1" == "final" ]; then SUFFIX=""; else SUFFIX=_pre; fi
DIR=/tmp/gmic-${VERSION}${SUFFIX}
rm -f gmic_*${VERSION}${SUFFIX}* deb_gmic_*

echo
echo " - Release number : $VERSION$SUFFIX"

# Create default command file.
#-----------------------------
echo " - Create 'gmic_stdlib.h' file"
cd gmic/src/
cp -f gmic_stdlib.gmic ../html/
cp -f gmic_stdlib.gmic ../html/gmic_stdlib.$SVERSION
make stdlib CImg.h
ln -fs ../gmic-community/zart ..
ln -fs ../gmic-qt ..
ln -fs ../../gmic-community/libcgmic/gmic_libc.cpp .
ln -fs ../../gmic-community/libcgmic/gmic_libc.h .
ln -fs ../../gmic-community/libcgmic/use_libcgmic.c .

if [ "$1" == "final" ]; then
    git tag -d v.$SVERSION
    git tag v.$SVERSION
    gmic_commit "Final release "${VERSION}
    git push --tags
else
    gmic_commit "Auto-commit for release "${VERSION}${SUFFIX}
fi

# Perform filters update on the G'MIC server.
#---------------------------------------------
echo " - Create list of filters."
rm -f /tmp/gui_filters.txt
\gmic gmic_stdlib.gmic -update_server > /tmp/gui_filters.txt
size=`du -b /tmp/gui_filters.txt | head -c 1`
if [ "$size" != "0" ]; then
    cp -f /tmp/gui_filters.txt ../html/
fi

# Create man page and bash autocompletion script.
#-------------------------------------------------
echo " - Create man page and bash autocompletion script."
make man
make bashcompletion
cd ..

# Create HTML reference and gallery pages.
#------------------------------------------
echo " - Create HTML reference page."
cd html
rm -f img/gmic_stdlib*.jpg image.jpg
\gmic -sp tiger -r2dy 320 -o image.jpg
\gmic -v - ../src/gmic_stdlib.gmic raw:../src/gmic_stdlib.gmic,uchar -document_gmic images,img/
if [ "$1" == "final" ]; then
    \gmic -v - ../src/gmic_stdlib.gmic raw:../src/gmic_stdlib.gmic,uchar _prerelease= -__help html >& reference.shtml;
else
    \gmic -v - ../src/gmic_stdlib.gmic raw:../src/gmic_stdlib.gmic,uchar _prerelease=`date +%y%m%d` -__help html >& reference.shtml;
fi
rm -f image.jpg
\gmic ../src/gmic_stdlib.gmic -update_gallery_html
cd ..

# Create .pdf handbook.
#----------------------
echo " - Create PDF reference handbook."
cd html
if [ "$1" == "final" ]; then
    \gmic -v - ../src/gmic_stdlib.gmic raw:../src/gmic_stdlib.gmic,uchar _version=$SVERSION _prerelease= -__help latex >& reference.tex;
else
    \gmic -v - ../src/gmic_stdlib.gmic raw:../src/gmic_stdlib.gmic,uchar _version=$SVERSION _prerelease=`date +%y%m%d` -__help latex >& reference.tex;
fi
pdflatex reference.tex
makeindex reference
pdflatex reference.tex
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=gmic_reference.pdf reference.pdf
rm -f reference.aux reference.idx reference.ind reference.out reference.ilg reference.log reference.pdf
cd ..

# Upload web page.
#-----------------
echo " - Upload G'MIC web page."
cd html
lftp ftp://$GMIC_LOGIN:$GMIC_PASSWD@ftp.gmic.eu -e "mirror -RL . /www/gmic/ ; quit"
rm -f gmic_stdlib.gmic gmic_stdlib.$SVERSION
cd ..
#exit

# Construct a clean version of the G'MIC folder.
#------------------------------------------------
echo " - Construct clean version of the G'MIC directory."
rm -rf $DIR
mkdir $DIR
cp -Lrf COPYING README CMakeLists.txt $DIR
mkdir $DIR/src
cd src
cp -Lrf Makefile CImg.h gmic.cpp gmic.h gmic_stdlib.h gmic_stdlib.gmic gmic_gimp_gtk.cpp gmic_in_script.scm use_libgmic.cpp gmic_libc.cpp gmic_libc.h use_libcgmic.c $DIR/src
touch $DIR/src/gmic_stdlib.h
cd ..
mkdir $DIR/man
cd man
cp -Lrf gmic.1.gz $DIR/man
cd ..
mkdir $DIR/resources
cd resources
cp -Lrf gmic_bashcompletion.sh $DIR/resources
cp -Lrf gmic_film_cluts.gmz $DIR/resources
cp -Lrf debian $DIR
cd ..
cd zart
qmake zart.pro
make distclean
mkdir $DIR/zart
cp -Lrf images include src ui *.xml *.html README zart.pro zart.qrc $DIR/zart
cd ..
cd gmic-qt
qmake gmic_qt.pro
make distclean
mkdir $DIR/gmic-qt
cp -Lrf *.qrc translations icons images include resources src ui README gmic_qt.pro gmic_qt_resource.rc $DIR/gmic-qt
cd ..

cd $DIR
sed s\/_gmic_version\/$VERSION$SUFFIX\/ README > /tmp/README
mv /tmp/README README

cd $DIR/debian
sed s\/_gmic_version\/$VERSION\/ changelog > /tmp/changelog
mv /tmp/changelog changelog

cd $DIR/src
if [ "$1" == "final" ]; then
    sed "s/PRERELEASE_CFLAGS = /NO_PRERELEASE_CFLAGS = /" Makefile > /tmp/Makefile
    mv /tmp/Makefile Makefile
    sed "s/PRERELEASE = /NO_PRERELEASE = /" Makefile > /tmp/Makefile
    mv /tmp/Makefile Makefile
fi
sed "s/rm -rf CImg.h gmic_stdlib.h /rm -rf /" Makefile > /tmp/Makefile
mv /tmp/Makefile Makefile
make clean
rm -f gmic_buildpackage
for i in *.h *.cpp *.c *.gmic *.scm; do
    sed -e 's/ *$//' $i >/tmp/gmic_buildpackage$$ && mv /tmp/gmic_buildpackage$$ $i
done

cd $DIR
rm -rf debian/gmic
rm -f `find . -name ".?*"`
rm -f `find . -name "*~"`
rm -r `find . -name "\#*"`
rm -r `find . -name "CVS"`
rm -r `find . -name ".git"`
cd zart
#sed "s+GMIC_PATH = ../../gmic/src/+GMIC_PATH = ../src/+" zart.pro > /tmp/zart.pro
#mv /tmp/zart.pro zart.pro
qmake CONFIG+=release GMIC_PATH=../src zart.pro

# Create .tar.gz source archives.
#--------------------------------
echo " - Create .tar.gz source archives."
cd $DIR/..
TARFILE=gmic_${VERSION}${SUFFIX}.tar
rm -f ${TARFILE} ${TARFILE}.gz deb_${TARFILE} deb_${TARFILE}.gz
tar chvf deb_${TARFILE} `basename $DIR`
gzip deb_${TARFILE}
cp -f deb_${TARFILE}.gz ${HOME}/work/src/

rm -rf `basename $DIR`/debian
rm -rf `basename $DIR`/zart
rm -rf `basename $DIR`/gmic-qt
rm -rf `basename $DIR`/src/gmic_libc.cpp
rm -rf `basename $DIR`/src/gmic_libc.h
rm -rf `basename $DIR`/src/use_libcgmic.c
tar chvf ${TARFILE} `basename $DIR`
gzip ${TARFILE}
cp -f ${TARFILE}.gz ${HOME}/work/src/

if [ "$1" == "final" ]; then
    lftp ftp://$GMIC_LOGIN:$GMIC_PASSWD@ftp.gmic.eu -e "put -O /www/gmic/files/source/ ${HOME}/work/src/${TARFILE}.gz; quit";
    lftp ftp://$GMIC_LOGIN:$GMIC_PASSWD@ftp.gmic.eu -e "put -O /www/gmic/files/source/ ${HOME}/work/src/${TARFILE}.gz -o gmic_source.tar.gz; quit";
fi
lftp ftp://$GMIC_LOGIN:$GMIC_PASSWD@ftp.gmic.eu -e "put -O /www/gmic/files/prerelease ${HOME}/work/src/${TARFILE}.gz -o gmic_source.tar.gz; quit"

# Create debian packages for debian/ubuntu 64 bits.
#--------------------------------------------------
echo " - Create debian packages."

cp ${HOME}/work/src/deb_${TARFILE}.gz /tmp/ &&
    cd /tmp/ &&
    PAK=gmic_${VERSION}${SUFFIX}_ubuntu_xenial_amd64.deb &&
    DIR=gmic-${VERSION}${SUFFIX} &&
    rm -rf $PAK &&
    touch deb_${TARFILE}.gz &&
    tar zxvf deb_${TARFILE}.gz &&
    find gmic-${VERSION}${SUFFIX} -exec touch {} \; &&
    cd $DIR/src &&
    sed "s/\$(MAKE) cli gimp_gtk lib/\$(MAKE) cli gimp_gtk lib libc zart gmic_qt gimp_qt/g" Makefile > /tmp/Makefile &&
    mv /tmp/Makefile Makefile && cd ../..
cd $DIR &&
    dpkg-buildpackage -d -j3 -rfakeroot;
mv ../gmic_${VERSION}_amd64.deb ../$PAK &&
    cp -f ../$PAK $HOME/work/src/ &&
    echo ELARA_DONE

# Wait for packages to be generated from Virtual machines, and copy them to G'MIC server.
#----------------------------------------------------------------------------------------
echo " - Waiting for all packages.".

cd ${HOME}/work/src/
gmic -_update_server_binaries ${VERSION}${SUFFIX}

#
# End of file.
#
